name: Payment System Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '600' # 10 minutes
  HEALTH_CHECK_TIMEOUT: '300' # 5 minutes
  ROLLBACK_TIMEOUT: '180' # 3 minutes

jobs:
  # =============================================
  # VALIDATION AND TESTING STAGE
  # =============================================
  validate-and-test:
    name: Validate & Test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Lint and format check
        run: |
          npm run lint
          npm run format:check

      - name: Run unit tests
        run: npm run test:unit:coverage
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}

      - name: Run integration tests
        run: npm run test:integration:comprehensive
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}
          TOSS_PAYMENTS_SECRET_KEY: ${{ secrets.TOSS_PAYMENTS_TEST_SECRET_KEY }}

      - name: Run security tests
        run: npm run test:security:comprehensive
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}
          TOSS_PAYMENTS_WEBHOOK_SECRET: ${{ secrets.TOSS_PAYMENTS_WEBHOOK_SECRET }}

      - name: Run E2E tests
        run: npm run test:e2e:comprehensive
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-reports/
          retention-days: 30

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  # =============================================
  # SECURITY SCANNING STAGE
  # =============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-and-test
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run dependency vulnerability scan
        run: npm audit --audit-level=high

  # =============================================
  # BUILD AND PACKAGE STAGE
  # =============================================
  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [validate-and-test, security-scan]
    if: always() && (needs.validate-and-test.result == 'success' || inputs.skip_tests) && (needs.security-scan.result == 'success' || inputs.skip_tests)

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.CONTAINER_REGISTRY }}/payment-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate deployment manifest
        run: |
          mkdir -p deployment-manifests
          cat > deployment-manifests/deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: payment-backend
            labels:
              app: payment-backend
              version: ${{ github.sha }}
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: payment-backend
            template:
              metadata:
                labels:
                  app: payment-backend
                  version: ${{ github.sha }}
              spec:
                containers:
                - name: payment-backend
                  image: ${{ steps.meta.outputs.tags }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "3000"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /health/ready
                      port: 3000
                    initialDelaySeconds: 10
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
          EOF

      - name: Upload deployment manifests
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifests
          path: deployment-manifests/

  # =============================================
  # STAGING DEPLOYMENT
  # =============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment manifests
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifests
          path: deployment-manifests/

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create backup of current deployment
        run: |
          kubectl get deployment payment-backend -o yaml > backup-deployment-$(date +%Y%m%d-%H%M%S).yaml || true
          echo "BACKUP_FILE=backup-deployment-$(date +%Y%m%d-%H%M%S).yaml" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f deployment-manifests/
          kubectl rollout status deployment/payment-backend --timeout=600s

      - name: Run post-deployment health checks
        run: |
          node scripts/deployment-health-check.js --environment=staging --timeout=300
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          HEALTH_CHECK_TOKEN: ${{ secrets.HEALTH_CHECK_TOKEN }}

      - name: Run smoke tests
        run: |
          npm run test:e2e:smoke -- --baseUrl=${{ secrets.STAGING_URL }}
        env:
          NODE_ENV: staging
          SUPABASE_URL: ${{ secrets.SUPABASE_STAGING_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: staging-backup-${{ github.sha }}
          path: ${{ env.BACKUP_FILE }}
          retention-days: 30

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"✅ Payment Backend deployed to staging successfully!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"}'

      - name: Rollback on failure
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout undo deployment/payment-backend
          kubectl rollout status deployment/payment-backend --timeout=180s
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"❌ Payment Backend staging deployment failed and was rolled back!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"}'

  # =============================================
  # PRODUCTION DEPLOYMENT
  # =============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment manifests
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifests
          path: deployment-manifests/

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Pre-deployment health check
        run: |
          node scripts/deployment-health-check.js --environment=production --pre-deployment
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TOKEN: ${{ secrets.HEALTH_CHECK_TOKEN }}

      - name: Create production backup
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get deployment payment-backend -o yaml > production-backup-$(date +%Y%m%d-%H%M%S).yaml
          kubectl get configmap payment-backend-config -o yaml >> production-backup-$(date +%Y%m%d-%H%M%S).yaml || true
          kubectl get secret payment-backend-secrets -o yaml >> production-backup-$(date +%Y%m%d-%H%M%S).yaml || true
          echo "PRODUCTION_BACKUP_FILE=production-backup-$(date +%Y%m%d-%H%M%S).yaml" >> $GITHUB_ENV

      - name: Blue-Green deployment preparation
        run: |
          export KUBECONFIG=kubeconfig
          # Create green deployment
          sed 's/payment-backend/payment-backend-green/g' deployment-manifests/deployment.yaml > deployment-manifests/green-deployment.yaml
          kubectl apply -f deployment-manifests/green-deployment.yaml
          kubectl rollout status deployment/payment-backend-green --timeout=600s

      - name: Green deployment health check
        run: |
          node scripts/deployment-health-check.js --environment=production --deployment=green --timeout=300
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TOKEN: ${{ secrets.HEALTH_CHECK_TOKEN }}

      - name: Run production smoke tests on green
        run: |
          npm run test:e2e:smoke -- --baseUrl=${{ secrets.PRODUCTION_URL }} --deployment=green
        env:
          NODE_ENV: production
          SUPABASE_URL: ${{ secrets.SUPABASE_PRODUCTION_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_PRODUCTION_SERVICE_ROLE_KEY }}

      - name: Switch traffic to green (Blue-Green swap)
        run: |
          export KUBECONFIG=kubeconfig
          # Update service to point to green deployment
          kubectl patch service payment-backend -p '{"spec":{"selector":{"app":"payment-backend-green"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Verify green is receiving traffic
          node scripts/deployment-health-check.js --environment=production --verify-traffic

      - name: Post-deployment monitoring
        run: |
          # Monitor for 5 minutes after deployment
          node scripts/deployment-monitor.js --duration=300 --environment=production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          MONITORING_TOKEN: ${{ secrets.MONITORING_TOKEN }}

      - name: Cleanup old blue deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl delete deployment payment-backend || true
          kubectl label deployment payment-backend-green app=payment-backend --overwrite
          kubectl patch deployment payment-backend-green -p '{"metadata":{"name":"payment-backend"}}'

      - name: Upload production backup
        uses: actions/upload-artifact@v4
        with:
          name: production-backup-${{ github.sha }}
          path: ${{ env.PRODUCTION_BACKUP_FILE }}
          retention-days: 90

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"🚀 Payment Backend deployed to PRODUCTION successfully!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nDeployment: Blue-Green"}'

      - name: Emergency rollback on failure
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig
          echo "🚨 EMERGENCY ROLLBACK INITIATED"
          
          # Restore backup
          kubectl apply -f ${{ env.PRODUCTION_BACKUP_FILE }}
          kubectl rollout status deployment/payment-backend --timeout=180s
          
          # Cleanup failed green deployment
          kubectl delete deployment payment-backend-green || true
          
          # Verify rollback
          node scripts/deployment-health-check.js --environment=production --verify-rollback
          
          # Emergency notification
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"🚨 EMERGENCY: Payment Backend production deployment FAILED and was ROLLED BACK!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nImmediate attention required!"}'

  # =============================================
  # POST-DEPLOYMENT MONITORING
  # =============================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --production

      - name: Extended monitoring
        run: |
          # Monitor for 30 minutes after deployment
          node scripts/deployment-monitor.js --duration=1800 --environment=production --extended
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          MONITORING_TOKEN: ${{ secrets.MONITORING_TOKEN }}
          ALERT_WEBHOOK: ${{ secrets.ALERT_WEBHOOK_URL }}

      - name: Generate deployment report
        run: |
          node scripts/generate-deployment-report.js --deployment-id=${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload monitoring results
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-results-${{ github.sha }}
          path: |
            monitoring-results/
            deployment-reports/
          retention-days: 30

