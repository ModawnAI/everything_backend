/**
 * Seed Support Tickets
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.resolve(__dirname, '../.env') });

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const randomPastDate = (daysAgo: number = 60) => {
  const date = new Date();
  date.setDate(date.getDate() - Math.floor(Math.random() * daysAgo));
  return date.toISOString();
};

async function seedTickets() {
  console.log('üé´ Seeding support tickets...\n');

  // Get existing users
  const { data: users } = await supabase
    .from('users')
    .select('id, email')
    .eq('user_role', 'user')
    .limit(5);

  if (!users || users.length === 0) {
    // Use any user if no regular users exist
    const { data: anyUsers } = await supabase
      .from('users')
      .select('id, email')
      .limit(5);

    if (!anyUsers || anyUsers.length === 0) {
      console.log('‚ùå No users found in database');
      process.exit(1);
    }
    users.push(...anyUsers);
  }

  const ticketTemplates = [
    { subject: 'Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏñ¥Ïöî', category: 'payment', priority: 'high', status: 'open' },
    { subject: 'ÏòàÏïΩ ÏãúÍ∞Ñ Î≥ÄÍ≤Ω ÏöîÏ≤≠', category: 'reservation', priority: 'medium', status: 'pending' },
    { subject: 'Í≥ÑÏ†ï ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Î¨∏Ïùò', category: 'account', priority: 'low', status: 'resolved' },
    { subject: 'Ïï±Ïù¥ ÏûêÏ£º Î©àÏ∂∞Ïöî', category: 'technical', priority: 'high', status: 'open' },
    { subject: 'ÏòàÏïΩ Ï∑®ÏÜå ÌôòÎ∂à Î¨∏Ïùò', category: 'payment', priority: 'medium', status: 'pending' },
    { subject: 'ÏÉµ Ï†ïÎ≥¥Í∞Ä ÏûòÎ™ªÎêòÏñ¥ ÏûàÏñ¥Ïöî', category: 'general', priority: 'low', status: 'closed' },
    { subject: 'Ìè¨Ïù∏Ìä∏Í∞Ä Ï†ÅÎ¶ΩÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§', category: 'payment', priority: 'medium', status: 'open' },
    { subject: 'Î°úÍ∑∏Ïù∏Ïù¥ Ïïà ÎèºÏöî', category: 'technical', priority: 'urgent', status: 'open' },
    { subject: 'Î¶¨Î∑∞ ÏûëÏÑ± Î∞©Î≤ï Î¨∏Ïùò', category: 'general', priority: 'low', status: 'resolved' },
    { subject: 'ÏòàÏïΩ ÌôïÏù∏ Î©îÏãúÏßÄÍ∞Ä Ïïà ÏôÄÏöî', category: 'reservation', priority: 'medium', status: 'pending' },
    { subject: 'ÌöåÏõê ÌÉàÌá¥ Ï†àÏ∞® Î¨∏Ïùò', category: 'account', priority: 'medium', status: 'open' },
    { subject: 'Ï†ÅÎ¶Ω Ìè¨Ïù∏Ìä∏ Ïú†Ìö®Í∏∞Í∞Ñ Î¨∏Ïùò', category: 'general', priority: 'low', status: 'resolved' },
    { subject: 'Í≤∞Ï†ú Ïò§Î•ò - Ï§ëÎ≥µ Í≤∞Ï†úÎê®', category: 'payment', priority: 'urgent', status: 'open' },
    { subject: 'ÏÉµ ÏòàÏïΩÏù¥ Ï∑®ÏÜåÎêòÏóàÎäîÎç∞ ÌôòÎ∂àÏù¥ ÏïàÎèºÏöî', category: 'payment', priority: 'high', status: 'pending' },
    { subject: 'Ïï± ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ Î°úÍ∑∏Ïù∏ Î∂àÍ∞Ä', category: 'technical', priority: 'high', status: 'open' }
  ];

  let created = 0;
  let errors = 0;

  for (const template of ticketTemplates) {
    const user = users[Math.floor(Math.random() * users.length)];

    const ticket = {
      user_id: user.id,
      subject: template.subject,
      description: `${template.subject}Ïóê ÎåÄÌïú ÏûêÏÑ∏Ìïú ÏÑ§Î™ÖÏûÖÎãàÎã§.\n\nÎ¨∏Ï†ú Î∞úÏÉù ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR')}\nÎπ†Î•∏ ÎèÑÏõÄ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.`,
      status: template.status,
      priority: template.priority,
      category: template.category,
      created_at: randomPastDate(30),
      updated_at: randomPastDate(15)
    };

    const { error } = await supabase.from('support_tickets').insert([ticket]);

    if (error) {
      console.error(`  ‚ùå Error: ${template.subject} - ${error.message}`);
      errors++;
    } else {
      console.log(`  ‚úÖ Created: [${template.category}/${template.priority}] ${template.subject} - ${template.status}`);
      created++;
    }
  }

  console.log(`\nüìä Summary: ${created} created, ${errors} errors`);
  console.log('üèÅ Seeding complete!\n');
}

seedTickets()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('\n‚ùå Fatal error:', error);
    process.exit(1);
  });
