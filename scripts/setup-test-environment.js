#!/usr/bin/env node

/**
 * Comprehensive Test Environment Setup Script
 * 
 * This script sets up a consistent test environment with proper mocks and configurations
 * to ensure all tests can run reliably without external dependencies.
 */

const fs = require('fs');
const path = require('path');

console.log('🔧 Setting up comprehensive test environment...');

// Create test environment configuration
const testConfig = {
  // Database configuration for tests
  database: {
    supabase: {
      url: 'https://test.supabase.co',
      anonKey: 'test-anon-key',
      serviceRoleKey: 'test-service-role-key'
    }
  },
  
  // Redis configuration for tests
  redis: {
    url: 'redis://localhost:6379',
    password: 'test-password',
    db: 1
  },
  
  // Payment configuration for tests
  payments: {
    tossPayments: {
      secretKey: 'test-secret-key',
      clientKey: 'test-client-key',
      baseUrl: 'https://api.tosspayments.com'
    }
  },
  
  // Firebase configuration for tests
  firebase: {
    projectId: 'test-project-id',
    privateKey: 'test-private-key',
    clientEmail: 'test@test.com'
  },
  
  // JWT configuration for tests
  jwt: {
    secret: 'test-jwt-secret-key-for-testing-only',
    expiresIn: '1h',
    refreshExpiresIn: '7d'
  },
  
  // Server configuration for tests
  server: {
    port: 3001,
    nodeEnv: 'test'
  },
  
  // Logging configuration for tests
  logging: {
    level: 'error' // Reduce log noise in tests
  },
  
  // Rate limiting configuration for tests
  rateLimit: {
    windowMs: 60000,
    max: 100
  }
};

// Create test environment file
const testEnvPath = path.join(__dirname, '..', '.env.test');
fs.writeFileSync(testEnvPath, `# Test Environment Configuration
# This file is automatically generated by setup-test-environment.js

# Database
SUPABASE_URL=${testConfig.database.supabase.url}
SUPABASE_ANON_KEY=${testConfig.database.supabase.anonKey}
SUPABASE_SERVICE_ROLE_KEY=${testConfig.database.supabase.serviceRoleKey}

# Redis
REDIS_URL=${testConfig.redis.url}
REDIS_PASSWORD=${testConfig.redis.password}
REDIS_DB=${testConfig.redis.db}

# Payments
TOSS_PAYMENTS_SECRET_KEY=${testConfig.payments.tossPayments.secretKey}
TOSS_PAYMENTS_CLIENT_KEY=${testConfig.payments.tossPayments.clientKey}
TOSS_PAYMENTS_BASE_URL=${testConfig.payments.tossPayments.baseUrl}

# Firebase
FIREBASE_PROJECT_ID=${testConfig.firebase.projectId}
FIREBASE_PRIVATE_KEY=${testConfig.firebase.privateKey}
FIREBASE_CLIENT_EMAIL=${testConfig.firebase.clientEmail}

# JWT
JWT_SECRET=${testConfig.jwt.secret}
JWT_EXPIRES_IN=${testConfig.jwt.expiresIn}
JWT_REFRESH_EXPIRES_IN=${testConfig.jwt.refreshExpiresIn}

# Server
PORT=${testConfig.server.port}
NODE_ENV=${testConfig.server.nodeEnv}

# Logging
LOG_LEVEL=${testConfig.logging.level}
`);

console.log('✅ Created .env.test file');

// Create comprehensive mock utilities
const mockUtilsPath = path.join(__dirname, '..', 'tests', 'utils', 'mock-utils.ts');
const mockUtilsContent = `/**
 * Comprehensive Mock Utilities for Testing
 * 
 * This file provides reusable mock utilities for consistent testing across the application.
 */

import { jest } from '@jest/globals';

/**
 * Creates a comprehensive Supabase mock
 */
export const createSupabaseMock = () => {
  const mockQuery = {
    select: jest.fn().mockReturnThis(),
    insert: jest.fn().mockReturnThis(),
    update: jest.fn().mockReturnThis(),
    delete: jest.fn().mockReturnThis(),
    eq: jest.fn().mockReturnThis(),
    neq: jest.fn().mockReturnThis(),
    gt: jest.fn().mockReturnThis(),
    gte: jest.fn().mockReturnThis(),
    lt: jest.fn().mockReturnThis(),
    lte: jest.fn().mockReturnThis(),
    like: jest.fn().mockReturnThis(),
    ilike: jest.fn().mockReturnThis(),
    is: jest.fn().mockReturnThis(),
    in: jest.fn().mockReturnThis(),
    contains: jest.fn().mockReturnThis(),
    containedBy: jest.fn().mockReturnThis(),
    rangeGt: jest.fn().mockReturnThis(),
    rangeGte: jest.fn().mockReturnThis(),
    rangeLt: jest.fn().mockReturnThis(),
    rangeLte: jest.fn().mockReturnThis(),
    rangeAdjacent: jest.fn().mockReturnThis(),
    overlaps: jest.fn().mockReturnThis(),
    textSearch: jest.fn().mockReturnThis(),
    match: jest.fn().mockReturnThis(),
    not: jest.fn().mockReturnThis(),
    or: jest.fn().mockReturnThis(),
    filter: jest.fn().mockReturnThis(),
    order: jest.fn().mockReturnThis(),
    limit: jest.fn().mockReturnThis(),
    range: jest.fn().mockReturnThis(),
    abortSignal: jest.fn().mockReturnThis(),
    single: jest.fn(),
    maybeSingle: jest.fn(),
    csv: jest.fn(),
    geojson: jest.fn(),
    explain: jest.fn(),
    rollback: jest.fn(),
    returns: jest.fn().mockReturnThis(),
    then: jest.fn(),
    catch: jest.fn(),
    finally: jest.fn()
  };

  return {
    from: jest.fn().mockReturnValue(mockQuery),
    rpc: jest.fn(),
    auth: {
      getUser: jest.fn(),
      signUp: jest.fn(),
      signInWithPassword: jest.fn(),
      signInWithOAuth: jest.fn(),
      signOut: jest.fn(),
      resetPasswordForEmail: jest.fn(),
      updateUser: jest.fn(),
      admin: {
        listUsers: jest.fn(),
        getUserById: jest.fn(),
        createUser: jest.fn(),
        updateUserById: jest.fn(),
        deleteUser: jest.fn()
      }
    },
    storage: {
      from: jest.fn().mockReturnValue({
        upload: jest.fn(),
        download: jest.fn(),
        remove: jest.fn(),
        list: jest.fn(),
        getPublicUrl: jest.fn(),
        createSignedUrl: jest.fn(),
        createSignedUrls: jest.fn(),
        update: jest.fn(),
        move: jest.fn(),
        copy: jest.fn()
      })
    },
    realtime: {
      channel: jest.fn().mockReturnValue({
        on: jest.fn().mockReturnThis(),
        subscribe: jest.fn(),
        unsubscribe: jest.fn()
      })
    }
  };
};

/**
 * Creates a comprehensive logger mock
 */
export const createLoggerMock = () => ({
  info: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  debug: jest.fn(),
  verbose: jest.fn(),
  silly: jest.fn()
});

/**
 * Creates a comprehensive config mock
 */
export const createConfigMock = () => ({
  database: {
    supabase: {
      url: 'https://test.supabase.co',
      anonKey: 'test-anon-key',
      serviceRoleKey: 'test-service-role-key'
    }
  },
  redis: {
    url: 'redis://localhost:6379',
    password: 'test-password',
    db: 1
  },
  payments: {
    tossPayments: {
      secretKey: 'test-secret-key',
      clientKey: 'test-client-key',
      baseUrl: 'https://api.tosspayments.com'
    }
  },
  firebase: {
    projectId: 'test-project-id',
    privateKey: 'test-private-key',
    clientEmail: 'test@test.com'
  },
  jwt: {
    secret: 'test-jwt-secret-key-for-testing-only',
    expiresIn: '1h',
    refreshExpiresIn: '7d'
  },
  server: {
    port: 3001,
    nodeEnv: 'test'
  },
  logging: {
    level: 'error'
  },
  rateLimit: {
    windowMs: 60000,
    max: 100
  }
});

/**
 * Creates a comprehensive fetch mock
 */
export const createFetchMock = () => {
  const mockFetch = jest.fn();
  
  // Default successful response
  mockFetch.mockResolvedValue({
    ok: true,
    status: 200,
    statusText: 'OK',
    headers: new Map(),
    json: jest.fn().mockResolvedValue({}),
    text: jest.fn().mockResolvedValue(''),
    blob: jest.fn().mockResolvedValue(new Blob()),
    arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(0)),
    formData: jest.fn().mockResolvedValue(new FormData()),
    clone: jest.fn().mockReturnThis()
  });
  
  return mockFetch;
};

/**
 * Creates a comprehensive crypto mock
 */
export const createCryptoMock = () => ({
  createHmac: jest.fn().mockReturnValue({
    update: jest.fn().mockReturnThis(),
    digest: jest.fn().mockReturnValue('mock-signature')
  }),
  randomBytes: jest.fn().mockReturnValue(Buffer.from('mock-random-bytes')),
  randomUUID: jest.fn().mockReturnValue('mock-uuid')
});

/**
 * Sets up global test mocks
 */
export const setupGlobalMocks = () => {
  // Mock global fetch
  global.fetch = createFetchMock();
  
  // Mock global crypto
  global.crypto = createCryptoMock();
  
  // Mock process.env
  process.env.NODE_ENV = 'test';
  process.env.SUPABASE_URL = 'https://test.supabase.co';
  process.env.SUPABASE_ANON_KEY = 'test-anon-key';
  process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';
  process.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';
  process.env.TOSS_PAYMENTS_SECRET_KEY = 'test-secret-key';
  process.env.TOSS_PAYMENTS_CLIENT_KEY = 'test-client-key';
  process.env.FIREBASE_PROJECT_ID = 'test-project-id';
  process.env.FIREBASE_PRIVATE_KEY = 'test-private-key';
  process.env.FIREBASE_CLIENT_EMAIL = 'test@test.com';
};

/**
 * Resets all mocks
 */
export const resetAllMocks = () => {
  jest.clearAllMocks();
  jest.resetAllMocks();
  jest.restoreAllMocks();
};

/**
 * Common test data factories
 */
export const testDataFactories = {
  createUser: (overrides = {}) => ({
    id: 'test-user-id',
    email: 'test@example.com',
    phone: '+821012345678',
    role: 'user',
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    ...overrides
  }),
  
  createShop: (overrides = {}) => ({
    id: 'test-shop-id',
    name: 'Test Shop',
    description: 'Test shop description',
    address: 'Test Address',
    latitude: 37.5665,
    longitude: 126.9780,
    phone: '+821012345678',
    isVerified: true,
    isActive: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    ...overrides
  }),
  
  createReservation: (overrides = {}) => ({
    id: 'test-reservation-id',
    userId: 'test-user-id',
    shopId: 'test-shop-id',
    status: 'pending',
    reservationDate: '2024-12-25',
    reservationTime: '14:00',
    totalAmount: 50000,
    depositAmount: 10000,
    pointsUsed: 0,
    specialRequests: 'Test request',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    ...overrides
  }),
  
  createPayment: (overrides = {}) => ({
    id: 'test-payment-id',
    reservationId: 'test-reservation-id',
    userId: 'test-user-id',
    amount: 50000,
    currency: 'KRW',
    status: 'pending',
    paymentMethod: 'card',
    paymentKey: 'test-payment-key',
    orderId: 'test-order-id',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    ...overrides
  })
};

export default {
  createSupabaseMock,
  createLoggerMock,
  createConfigMock,
  createFetchMock,
  createCryptoMock,
  setupGlobalMocks,
  resetAllMocks,
  testDataFactories
};
`;

// Ensure the tests/utils directory exists
const testsUtilsDir = path.join(__dirname, '..', 'tests', 'utils');
if (!fs.existsSync(testsUtilsDir)) {
  fs.mkdirSync(testsUtilsDir, { recursive: true });
}

fs.writeFileSync(mockUtilsPath, mockUtilsContent);
console.log('✅ Created comprehensive mock utilities');

// Create a test setup helper
const testSetupPath = path.join(__dirname, '..', 'tests', 'setup', 'test-setup-helper.ts');
const testSetupContent = `/**
 * Test Setup Helper
 * 
 * This file provides common setup functions for tests to ensure consistent
 * test environment across all test files.
 */

import { setupGlobalMocks, createSupabaseMock, createLoggerMock, createConfigMock } from '../utils/mock-utils';

/**
 * Sets up common mocks for all tests
 */
export const setupCommonMocks = () => {
  // Setup global mocks
  setupGlobalMocks();
  
  // Mock database
  jest.mock('../../src/config/database', () => ({
    getSupabaseClient: jest.fn(() => createSupabaseMock()),
    initializeDatabase: jest.fn(() => Promise.resolve({
      client: createSupabaseMock(),
      healthCheck: jest.fn(() => Promise.resolve(true)),
      disconnect: jest.fn(() => Promise.resolve())
    }))
  }));
  
  // Mock logger
  jest.mock('../../src/utils/logger', () => ({
    logger: createLoggerMock()
  }));
  
  // Mock config
  jest.mock('../../src/config/environment', () => ({
    config: createConfigMock()
  }));
  
  // Mock Firebase Admin
  jest.mock('firebase-admin', () => ({
    initializeApp: jest.fn(),
    credential: {
      applicationDefault: jest.fn()
    },
    apps: []
  }));
  
  // Mock Redis
  jest.mock('redis', () => ({
    createClient: jest.fn(() => ({
      connect: jest.fn(),
      disconnect: jest.fn(),
      get: jest.fn(),
      set: jest.fn(),
      del: jest.fn(),
      exists: jest.fn(),
      expire: jest.fn(),
      on: jest.fn()
    }))
  }));
  
  // Mock rate limiter
  jest.mock('rate-limiter-flexible', () => ({
    RateLimiterRedis: jest.fn().mockImplementation(() => ({
      consume: jest.fn().mockResolvedValue({ remainingPoints: 100, msBeforeNext: 0 }),
      penalty: jest.fn(),
      reward: jest.fn(),
      block: jest.fn(),
      get: jest.fn().mockResolvedValue({ remainingPoints: 100, msBeforeNext: 0 }),
      delete: jest.fn()
    }))
  }));
};

/**
 * Cleans up after tests
 */
export const cleanupAfterTests = () => {
  jest.clearAllMocks();
  jest.resetAllMocks();
  jest.restoreAllMocks();
};

export default {
  setupCommonMocks,
  cleanupAfterTests
};
`;

// Ensure the tests/setup directory exists
const testsSetupDir = path.join(__dirname, '..', 'tests', 'setup');
if (!fs.existsSync(testsSetupDir)) {
  fs.mkdirSync(testsSetupDir, { recursive: true });
}

fs.writeFileSync(testSetupPath, testSetupContent);
console.log('✅ Created test setup helper');

// Update Jest configuration to use the test environment
const jestConfigPath = path.join(__dirname, '..', 'jest.config.js');
let jestConfig = fs.readFileSync(jestConfigPath, 'utf8');

// Add setupFilesAfterEnv to use our test setup
if (!jestConfig.includes('setupFilesAfterEnv')) {
  jestConfig = jestConfig.replace(
    'module.exports = {',
    `module.exports = {
  setupFilesAfterEnv: ['<rootDir>/tests/setup/test-setup-helper.ts'],`
  );
  fs.writeFileSync(jestConfigPath, jestConfig);
  console.log('✅ Updated Jest configuration');
}

// Create a test runner script
const testRunnerPath = path.join(__dirname, '..', 'scripts', 'run-tests-with-setup.js');
const testRunnerContent = `#!/usr/bin/env node

/**
 * Test Runner with Setup
 * 
 * This script ensures the test environment is properly set up before running tests.
 */

const { execSync } = require('child_process');
const path = require('path');

console.log('🚀 Running tests with comprehensive setup...');

try {
  // Load test environment
  require('dotenv').config({ path: path.join(__dirname, '..', '.env.test') });
  
  // Run the tests
  const testCommand = process.argv.slice(2).join(' ') || 'npm test';
  execSync(testCommand, { 
    stdio: 'inherit', 
    cwd: path.join(__dirname, '..'),
    env: {
      ...process.env,
      NODE_ENV: 'test'
    }
  });
  
  console.log('✅ Tests completed successfully');
} catch (error) {
  console.error('❌ Tests failed:', error.message);
  process.exit(1);
}
`;

fs.writeFileSync(testRunnerPath, testRunnerContent);
fs.chmodSync(testRunnerPath, '755');
console.log('✅ Created test runner script');

// Update package.json with new test scripts
const packageJsonPath = path.join(__dirname, '..', 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

// Add new test scripts
packageJson.scripts = {
  ...packageJson.scripts,
  'test:setup': 'node scripts/setup-test-environment.js',
  'test:with-setup': 'node scripts/run-tests-with-setup.js',
  'test:unit:fixed': 'node scripts/run-tests-with-setup.js tests/unit',
  'test:integration:fixed': 'node scripts/run-tests-with-setup.js tests/integration',
  'test:all:fixed': 'node scripts/run-tests-with-setup.js'
};

fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
console.log('✅ Updated package.json with new test scripts');

console.log(`
🎉 Test environment setup completed!

New commands available:
- npm run test:setup          - Set up test environment
- npm run test:with-setup     - Run tests with proper setup
- npm run test:unit:fixed     - Run unit tests with setup
- npm run test:integration:fixed - Run integration tests with setup
- npm run test:all:fixed      - Run all tests with setup

The setup includes:
✅ Test environment configuration (.env.test)
✅ Comprehensive mock utilities
✅ Test setup helpers
✅ Updated Jest configuration
✅ Test runner scripts
✅ Package.json scripts

You can now run tests with: npm run test:unit:fixed
`);

console.log('🔧 Test environment setup completed successfully!');
