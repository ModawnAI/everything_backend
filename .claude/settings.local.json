{
  "permissions": {
    "allow": [
      "Bash(npm run dev:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(cmd.exe /c \"taskkill /PID 21388 /F\")",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(redis-cli:*)",
      "Bash(where:*)",
      "Bash(dir:*)",
      "Bash(choco:*)",
      "Bash(tar:*)",
      "Bash(start redis-server.exe redis.windows.conf)",
      "Bash(timeout:*)",
      "Bash(powershell:*)",
      "Bash(redis-cli.exe ping:*)",
      "Bash(.\\redis\\redis-cli.exe:*)",
      "Bash(E:/Github/everything_backend/redis/redis-cli.exe ping)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(curl:*)",
      "Bash(cmd.exe:*)",
      "Bash(npx tsc:*)",
      "Bash(git checkout:*)",
      "Bash(PORT=3000 npm run dev)",
      "Bash(npx ts-node:*)",
      "Bash(cat:*)",
      "Bash(node:*)",
      "WebFetch(domain:localhost)",
      "Bash(grep:*)",
      "Bash(npm run kill-port:*)",
      "Bash(cp:*)",
      "Bash(test:*)",
      "Bash(docker-compose logs:*)",
      "Bash(docker-compose down:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(openssl req:*)",
      "Bash(docker exec:*)",
      "Bash(docker ps:*)",
      "Bash(Select-String -Pattern \"POST|admin|login|error\")",
      "Bash(Select-Object -Last 10)",
      "Bash(Select-String -Pattern \"PASSWORD-CHECK\" -Context 3,3)",
      "Bash(Select-Object -First 1)",
      "Bash(for i in {1..3})",
      "Bash(do echo \"=== Test $i ===\")",
      "Bash(done)",
      "Bash(for i in 1 2 3 4 5)",
      "Bash(do echo \"=== Login Test #$i ===\")",
      "Bash(for i in {1..5})",
      "Bash(do curl -s http://localhost:3001/health)",
      "Bash(tasklist)",
      "Bash(Get-Content -Path \"logs/combined.log\" -Tail 50 -Wait)",
      "Bash(docker stop:*)",
      "Bash(lsof:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file.routes.ts ===\" grep \"router\\.\\(get\\|post\\|put\\|delete\\)\" \"/Users/paksungho/everything_backend/src/routes/$file.routes.ts\")",
      "Bash(if [ -f \"E:/Github/everything_backend/src/seeds/data/shop_services.json\" ])",
      "Bash(then node -e \"\n  const data = require(''''E:/Github/everything_backend/src/seeds/data/shop_services.json'''');\n  const shopIds = new Set(data.map(s => s.shop_id));\n  const shopServiceCounts = {};\n  data.forEach(s => {\n    shopServiceCounts[s.shop_id] = (shopServiceCounts[s.shop_id] || 0) + 1;\n  });\n  const counts = Object.values(shopServiceCounts).sort((a,b) => a-b);\n  console.log(''''üìä Shop-Service Relationship (from seed data):'''');\n  console.log(''''============================================='''');\n  console.log(''''Total services:'''', data.length);\n  console.log(''''Unique shops:'''', shopIds.size);\n  console.log(''''Average services per shop:'''', (data.length / shopIds.size).toFixed(2));\n  console.log(''''Min services per shop:'''', Math.min(...counts));\n  console.log(''''Max services per shop:'''', Math.max(...counts));\n  console.log(''''Median services per shop:'''', counts[Math.floor(counts.length/2)]);\n  console.log('''''''');\n  console.log(''''Distribution:'''');\n  const distribution = {};\n  counts.forEach(c => distribution[c] = (distribution[c] || 0) + 1);\n  Object.entries(distribution).sort((a,b) => parseInt(a[0]) - parseInt(b[0])).forEach(([count, shops]) => {\n    console.log(count + '''' services: '''' + shops + '''' shops'''');\n  });\n  \" else echo \"Seed file not found, trying API with smaller limit...\" curl -s \"http://localhost:3001/api/service-catalog?limit=100\")",
      "Bash(awk:*)",
      "Bash(head -3 echo \"\" echo \"2. POST /api/admin/shops/:id/services (Create)\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X POST \"http://localhost:3001/api/admin/shops/test-shop-id/services\")",
      "Bash(head -3 echo \"\" echo \"3. GET /api/admin/shops/:id/services/:serviceId (Detail)\" curl -s -w \"\\nStatus: %{http_code}\\n\" \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(head -3 echo \"\" echo \"4. PUT /api/admin/shops/:id/services/:serviceId (Update)\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X PUT \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(head -3 echo \"\" echo \"5. DELETE /api/admin/shops/:id/services/:serviceId (Delete)\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X DELETE \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(Get-Content -Path \"logs/combined.log\" -Tail 30)",
      "Bash(Select-String -Pattern \"12:04|admin/shops|services|404|401\")",
      "Bash(do echo \"Testing: $path\" curl -s -w \"\\nStatus: %{http_code}\\n\" \"http://localhost:3001$path\")",
      "SlashCommand(/sc:troubleshoot)",
      "Bash(head -3 echo \"\" echo \"=== 2. POST /api/admin/shops/:id/services (Create) ===\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X POST \"http://localhost:3001/api/admin/shops/test-shop-id/services\")",
      "Bash(head -3 echo \"\" echo \"=== 3. GET /api/admin/shops/:id/services/:serviceId (Detail) ===\" curl -s -w \"\\nStatus: %{http_code}\\n\" \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(head -3 echo \"\" echo \"=== 4. PUT /api/admin/shops/:id/services/:serviceId (Update) ===\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X PUT \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(head -3 echo \"\" echo \"=== 5. DELETE /api/admin/shops/:id/services/:serviceId (Delete) ===\" curl -s -w \"\\nStatus: %{http_code}\\n\" -X DELETE \"http://localhost:3001/api/admin/shops/test-shop-id/services/test-service-id\")",
      "Bash(npm run dev:clean:*)",
      "Bash(python:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(Get-Content logs/combined.log -Tail 50)",
      "Bash(Select-String \"401\")",
      "Bash(Select-Object -First 10)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(Get-Content logs/combined.log -Tail 20)",
      "Bash(Select-String -Pattern \"social-login|auth\")",
      "Bash(Get-Content logs/combined.log -Tail 100)",
      "Bash(Select-String -Pattern \"VALIDATION|CONTROLLER|SERVICE|social-login\" -Context 0,2)",
      "Bash(tasklist:*)",
      "Bash(Get-Content logs/combined.log -Tail 30)",
      "Bash(Select-String -Pattern \"üöÄ|üîê|üì¨|üîç|CONTROLLER|SERVICE|VALIDATION\")",
      "Bash(Select-String -Pattern \"social-login|AUTH|google\" -Context 2,2)",
      "mcp__desktop-commander__list_processes",
      "Bash(Select-String -Pattern \"üöÄ|SERVER|listening|error|social-login\" -Context 0,2)",
      "Bash(Select-String -Pattern \"social-auth\" -Context 2,2)",
      "Bash(Get-Content logs/error.log -Tail 30)",
      "Bash(Select-String -Pattern \"DEBUG|getShopServices|req.params|shopId\")",
      "Bash(Select-String -Pattern \"AUTH|Fetching|retrieved\")",
      "Bash(Select-String -Pattern \"10:37|crash|error|ERROR|fatal|FATAL\" -Context 2,2)",
      "Bash(Get-Process -Name node -ErrorAction SilentlyContinue)",
      "Bash(Select-Object Id, ProcessName, StartTime)",
      "Bash(Select-String -Pattern \"üöÄ|listening|error|crash|reservation\" -Context 0,2)",
      "Bash(echo:*)",
      "Bash(Get-Content logs/error.log -Tail 100)",
      "Bash(Select-String -Pattern \"getReservations|getUserReservations|reservation\" -Context 3,3)",
      "Bash(Select-String -Pattern \"getReservations|reservations|404|UNCAUGHT|UNHANDLED\" -Context 2,2)",
      "Bash(Select-String -Pattern \"üöÄ|SERVER|listening|error|Cookie|AUTH-DEBUG\" -Context 0,2)",
      "Bash(Select-String -Pattern \"reservation|GET /api\" -Context 0,2)",
      "Bash(Select-String -Pattern \"reservation|getUserReservations|getReservations\" -Context 2,2)",
      "Bash(Select-Object -Last 30)",
      "Bash(Select-String -Pattern \"listening|error|ERROR|JWT|Local verification\")",
      "Bash(Select-String -Pattern \"üöÄ|SERVER|listening|error|crash|JWT_SECRET\" -Context 0,2)",
      "Bash(find:*)",
      "Bash(Get-Content logs/error.log -Tail 50)",
      "Bash(Select-String -Pattern \"crash|error|ERROR|fatal|FATAL\" -Context 2,2)",
      "Bash(Select-String -Pattern \"crash|error|ERROR|AUTH|middleware\" -Context 2,2)",
      "Bash(Select-String -Pattern \"reservation|favorite|GET /api\" -Context 1,2)",
      "Bash(PORT=3001 npx ts-node:*)",
      "Bash(do echo \"=== Request $i ===\")",
      "Bash(time curl:*)",
      "Bash(Select-String -Pattern \"Redis|rate|limiter\" -Context 0,1)",
      "Bash(redis/redis-cli.exe INFO:*)",
      "Bash(redis/redis-cli.exe KEYS \"*rate*\")",
      "Bash(do curl -s \"http://localhost:3001/api/user/reservations?limit=10\")",
      "Bash(redis/redis-cli.exe:*)",
      "Bash(Get-Process node -ErrorAction SilentlyContinue)",
      "Bash(Stop-Process -Force)",
      "Bash(Get-Content logs/error.log -Tail 50 -ErrorAction SilentlyContinue)",
      "Bash(pkill:*)",
      "Bash(Get-Content logs/combined.log -Tail 30 -ErrorAction SilentlyContinue)",
      "Bash(Select-Object -First 30)",
      "Bash(Select-String -Pattern \"error|ERROR|crash|CRASH|fatal|FATAL\" -Context 2,2)",
      "Bash(./redis/redis-cli.exe:*)",
      "Bash(npm run redis:start:*)",
      "Bash(npm run redis:status:*)",
      "Bash(Select-String -Pattern \"üöÄ|SERVER|listening|error|reservation|status=past\" -Context 0,2)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "task-master-ai",
    "supabase",
    "portone-mcp-server"
  ]
}
